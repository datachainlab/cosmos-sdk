// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/lightclients/corda/v1/operation.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PartiesFromNameRequest struct {
	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ExactMatch bool   `protobuf:"varint,2,opt,name=exact_match,json=exactMatch,proto3" json:"exact_match,omitempty"`
}

func (m *PartiesFromNameRequest) Reset()         { *m = PartiesFromNameRequest{} }
func (m *PartiesFromNameRequest) String() string { return proto.CompactTextString(m) }
func (*PartiesFromNameRequest) ProtoMessage()    {}
func (*PartiesFromNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6936e735fdfbe26c, []int{0}
}
func (m *PartiesFromNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartiesFromNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartiesFromNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartiesFromNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartiesFromNameRequest.Merge(m, src)
}
func (m *PartiesFromNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *PartiesFromNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PartiesFromNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PartiesFromNameRequest proto.InternalMessageInfo

func (m *PartiesFromNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PartiesFromNameRequest) GetExactMatch() bool {
	if m != nil {
		return m.ExactMatch
	}
	return false
}

type PartiesFromNameResponse struct {
	Parties []*Party `protobuf:"bytes,1,rep,name=parties,proto3" json:"parties,omitempty"`
}

func (m *PartiesFromNameResponse) Reset()         { *m = PartiesFromNameResponse{} }
func (m *PartiesFromNameResponse) String() string { return proto.CompactTextString(m) }
func (*PartiesFromNameResponse) ProtoMessage()    {}
func (*PartiesFromNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6936e735fdfbe26c, []int{1}
}
func (m *PartiesFromNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartiesFromNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartiesFromNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartiesFromNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartiesFromNameResponse.Merge(m, src)
}
func (m *PartiesFromNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *PartiesFromNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PartiesFromNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PartiesFromNameResponse proto.InternalMessageInfo

func (m *PartiesFromNameResponse) GetParties() []*Party {
	if m != nil {
		return m.Parties
	}
	return nil
}

type CreateGenesisRequest struct {
	Participants []*Party `protobuf:"bytes,1,rep,name=participants,proto3" json:"participants,omitempty"`
}

func (m *CreateGenesisRequest) Reset()         { *m = CreateGenesisRequest{} }
func (m *CreateGenesisRequest) String() string { return proto.CompactTextString(m) }
func (*CreateGenesisRequest) ProtoMessage()    {}
func (*CreateGenesisRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6936e735fdfbe26c, []int{2}
}
func (m *CreateGenesisRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateGenesisRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateGenesisRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateGenesisRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateGenesisRequest.Merge(m, src)
}
func (m *CreateGenesisRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateGenesisRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateGenesisRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateGenesisRequest proto.InternalMessageInfo

func (m *CreateGenesisRequest) GetParticipants() []*Party {
	if m != nil {
		return m.Participants
	}
	return nil
}

type CreateHostAndBankRequest struct {
	BaseId *StateRef `protobuf:"bytes,1,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *CreateHostAndBankRequest) Reset()         { *m = CreateHostAndBankRequest{} }
func (m *CreateHostAndBankRequest) String() string { return proto.CompactTextString(m) }
func (*CreateHostAndBankRequest) ProtoMessage()    {}
func (*CreateHostAndBankRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6936e735fdfbe26c, []int{3}
}
func (m *CreateHostAndBankRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateHostAndBankRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateHostAndBankRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateHostAndBankRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateHostAndBankRequest.Merge(m, src)
}
func (m *CreateHostAndBankRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateHostAndBankRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateHostAndBankRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateHostAndBankRequest proto.InternalMessageInfo

func (m *CreateHostAndBankRequest) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

type AllocateFundRequest struct {
	BaseId *StateRef `protobuf:"bytes,1,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
	Owner  string    `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Denom  string    `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount string    `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *AllocateFundRequest) Reset()         { *m = AllocateFundRequest{} }
func (m *AllocateFundRequest) String() string { return proto.CompactTextString(m) }
func (*AllocateFundRequest) ProtoMessage()    {}
func (*AllocateFundRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6936e735fdfbe26c, []int{4}
}
func (m *AllocateFundRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllocateFundRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllocateFundRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllocateFundRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocateFundRequest.Merge(m, src)
}
func (m *AllocateFundRequest) XXX_Size() int {
	return m.Size()
}
func (m *AllocateFundRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocateFundRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllocateFundRequest proto.InternalMessageInfo

func (m *AllocateFundRequest) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

func (m *AllocateFundRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *AllocateFundRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *AllocateFundRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func init() {
	proto.RegisterType((*PartiesFromNameRequest)(nil), "ibc.lightclients.corda.v1.PartiesFromNameRequest")
	proto.RegisterType((*PartiesFromNameResponse)(nil), "ibc.lightclients.corda.v1.PartiesFromNameResponse")
	proto.RegisterType((*CreateGenesisRequest)(nil), "ibc.lightclients.corda.v1.CreateGenesisRequest")
	proto.RegisterType((*CreateHostAndBankRequest)(nil), "ibc.lightclients.corda.v1.CreateHostAndBankRequest")
	proto.RegisterType((*AllocateFundRequest)(nil), "ibc.lightclients.corda.v1.AllocateFundRequest")
}

func init() {
	proto.RegisterFile("ibc/lightclients/corda/v1/operation.proto", fileDescriptor_6936e735fdfbe26c)
}

var fileDescriptor_6936e735fdfbe26c = []byte{
	// 507 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xad, 0xdb, 0x92, 0xd2, 0x49, 0x11, 0x62, 0xa9, 0x8a, 0xc9, 0xc1, 0x44, 0xe6, 0x12, 0x04,
	0xb1, 0x15, 0x73, 0x43, 0x48, 0xa8, 0x05, 0x15, 0x7a, 0x68, 0x85, 0x5c, 0x90, 0x00, 0x21, 0x55,
	0xeb, 0xf5, 0x34, 0x59, 0xd5, 0xde, 0x35, 0xde, 0x4d, 0x70, 0xbf, 0x80, 0x2b, 0x37, 0x7e, 0x89,
	0x63, 0xc5, 0x89, 0x23, 0x4a, 0x7e, 0x04, 0x79, 0x5d, 0xa3, 0x96, 0xb4, 0xa1, 0x91, 0x38, 0x79,
	0x67, 0x3c, 0xef, 0xcd, 0x7a, 0xe6, 0xf9, 0xc1, 0x03, 0x1e, 0x31, 0x3f, 0xe1, 0xfd, 0x81, 0x66,
	0x09, 0x47, 0xa1, 0x95, 0xcf, 0x64, 0x1e, 0x53, 0x7f, 0xd4, 0xf3, 0x65, 0x86, 0x39, 0xd5, 0x5c,
	0x0a, 0x2f, 0xcb, 0xa5, 0x96, 0xe4, 0x2e, 0x8f, 0x98, 0x77, 0xb6, 0xd4, 0x33, 0xa5, 0xde, 0xa8,
	0xd7, 0x7a, 0x78, 0x39, 0x8b, 0x39, 0x74, 0xf5, 0x71, 0x86, 0xaa, 0xe2, 0x71, 0x77, 0x61, 0xe3,
	0x35, 0xcd, 0x35, 0x47, 0xb5, 0x9d, 0xcb, 0x74, 0x8f, 0xa6, 0x18, 0xe2, 0xa7, 0x21, 0x2a, 0x4d,
	0x08, 0x2c, 0x0b, 0x9a, 0xa2, 0x6d, 0xb5, 0xad, 0xce, 0x6a, 0x68, 0xce, 0xe4, 0x1e, 0x34, 0xb1,
	0xa0, 0x4c, 0x1f, 0xa4, 0x54, 0xb3, 0x81, 0xbd, 0xd8, 0xb6, 0x3a, 0xd7, 0x43, 0x30, 0xa9, 0xdd,
	0x32, 0xe3, 0xbe, 0x85, 0x3b, 0x53, 0x74, 0x2a, 0x93, 0x42, 0x21, 0x79, 0x02, 0x2b, 0x59, 0xf5,
	0xca, 0xb6, 0xda, 0x4b, 0x9d, 0x66, 0xd0, 0xf6, 0x2e, 0xfd, 0x06, 0xaf, 0x24, 0x39, 0x0e, 0x6b,
	0x80, 0xfb, 0x11, 0xd6, 0x9f, 0xe7, 0x48, 0x35, 0xbe, 0x44, 0x81, 0x8a, 0xab, 0xfa, 0x8e, 0x2f,
	0x60, 0xcd, 0x94, 0x30, 0x9e, 0x51, 0xa1, 0xaf, 0x4e, 0x7c, 0x0e, 0xe5, 0xbe, 0x03, 0xbb, 0x62,
	0x7f, 0x25, 0x95, 0xde, 0x14, 0xf1, 0x16, 0x15, 0x47, 0x75, 0x87, 0xa7, 0xb0, 0x12, 0x51, 0x85,
	0x07, 0x3c, 0x36, 0x83, 0x68, 0x06, 0xf7, 0x67, 0x90, 0xef, 0x6b, 0xaa, 0x31, 0xc4, 0xc3, 0xb0,
	0x51, 0x62, 0x76, 0x62, 0xf7, 0x9b, 0x05, 0xb7, 0x37, 0x93, 0x44, 0x32, 0xaa, 0x71, 0x7b, 0x28,
	0xe2, 0xff, 0xc2, 0x4a, 0xd6, 0xe1, 0x9a, 0xfc, 0x2c, 0x30, 0x37, 0xf3, 0x5f, 0x0d, 0xab, 0xa0,
	0xcc, 0xc6, 0x28, 0x64, 0x6a, 0x2f, 0x55, 0x59, 0x13, 0x90, 0x0d, 0x68, 0xd0, 0x54, 0x0e, 0x85,
	0xb6, 0x97, 0x4d, 0xfa, 0x34, 0x0a, 0xbe, 0x58, 0xd0, 0xdc, 0x93, 0x31, 0xee, 0x63, 0x3e, 0xe2,
	0x0c, 0x49, 0x01, 0x37, 0xff, 0x5a, 0x1c, 0xe9, 0xfd, 0x63, 0x8c, 0xd3, 0x9a, 0x69, 0x05, 0xf3,
	0x40, 0x2a, 0x5d, 0x04, 0x3f, 0x16, 0x01, 0x76, 0x22, 0x56, 0x5f, 0x44, 0xc0, 0x8d, 0x73, 0xab,
	0x26, 0xfe, 0x0c, 0xce, 0x8b, 0x44, 0xd1, 0x7a, 0x34, 0x6b, 0x96, 0xbc, 0x2f, 0x30, 0x7e, 0x93,
	0x53, 0xa1, 0x28, 0x2b, 0x7f, 0x27, 0x72, 0x08, 0xb7, 0xa6, 0x96, 0x4f, 0xae, 0xb2, 0x8e, 0x39,
	0xfb, 0x24, 0xb0, 0x76, 0x56, 0x09, 0xc4, 0x9b, 0x81, 0xbe, 0x40, 0x32, 0xf3, 0x75, 0xdb, 0x7a,
	0xff, 0x7d, 0xec, 0x58, 0x27, 0x63, 0xc7, 0xfa, 0x35, 0x76, 0xac, 0xaf, 0x13, 0x67, 0xe1, 0x64,
	0xe2, 0x2c, 0xfc, 0x9c, 0x38, 0x0b, 0x1f, 0x9e, 0xf5, 0xb9, 0x1e, 0x0c, 0x23, 0x8f, 0xc9, 0xd4,
	0x67, 0x52, 0xa5, 0x52, 0x9d, 0x3e, 0xba, 0x2a, 0x3e, 0xf2, 0x0b, 0xff, 0x8f, 0x79, 0x74, 0x6b,
	0xf7, 0x28, 0x8a, 0x6e, 0x65, 0x20, 0xc6, 0x37, 0xa2, 0x86, 0x31, 0x8e, 0xc7, 0xbf, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x4e, 0x41, 0xe2, 0x68, 0xad, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeServiceClient interface {
	PartiesFromName(ctx context.Context, in *PartiesFromNameRequest, opts ...grpc.CallOption) (*PartiesFromNameResponse, error)
}

type nodeServiceClient struct {
	cc grpc1.ClientConn
}

func NewNodeServiceClient(cc grpc1.ClientConn) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) PartiesFromName(ctx context.Context, in *PartiesFromNameRequest, opts ...grpc.CallOption) (*PartiesFromNameResponse, error) {
	out := new(PartiesFromNameResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.NodeService/PartiesFromName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServiceServer is the server API for NodeService service.
type NodeServiceServer interface {
	PartiesFromName(context.Context, *PartiesFromNameRequest) (*PartiesFromNameResponse, error)
}

// UnimplementedNodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNodeServiceServer struct {
}

func (*UnimplementedNodeServiceServer) PartiesFromName(ctx context.Context, req *PartiesFromNameRequest) (*PartiesFromNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartiesFromName not implemented")
}

func RegisterNodeServiceServer(s grpc1.Server, srv NodeServiceServer) {
	s.RegisterService(&_NodeService_serviceDesc, srv)
}

func _NodeService_PartiesFromName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartiesFromNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).PartiesFromName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.NodeService/PartiesFromName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).PartiesFromName(ctx, req.(*PartiesFromNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ibc.lightclients.corda.v1.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PartiesFromName",
			Handler:    _NodeService_PartiesFromName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ibc/lightclients/corda/v1/operation.proto",
}

// IbcServiceClient is the client API for IbcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IbcServiceClient interface {
	CreateGenesis(ctx context.Context, in *CreateGenesisRequest, opts ...grpc.CallOption) (*SignedTransaction, error)
	CreateHostAndBank(ctx context.Context, in *StateRef, opts ...grpc.CallOption) (*SignedTransaction, error)
	AllocateFund(ctx context.Context, in *AllocateFundRequest, opts ...grpc.CallOption) (*SignedTransaction, error)
}

type ibcServiceClient struct {
	cc grpc1.ClientConn
}

func NewIbcServiceClient(cc grpc1.ClientConn) IbcServiceClient {
	return &ibcServiceClient{cc}
}

func (c *ibcServiceClient) CreateGenesis(ctx context.Context, in *CreateGenesisRequest, opts ...grpc.CallOption) (*SignedTransaction, error) {
	out := new(SignedTransaction)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.IbcService/CreateGenesis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ibcServiceClient) CreateHostAndBank(ctx context.Context, in *StateRef, opts ...grpc.CallOption) (*SignedTransaction, error) {
	out := new(SignedTransaction)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.IbcService/CreateHostAndBank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ibcServiceClient) AllocateFund(ctx context.Context, in *AllocateFundRequest, opts ...grpc.CallOption) (*SignedTransaction, error) {
	out := new(SignedTransaction)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.IbcService/AllocateFund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IbcServiceServer is the server API for IbcService service.
type IbcServiceServer interface {
	CreateGenesis(context.Context, *CreateGenesisRequest) (*SignedTransaction, error)
	CreateHostAndBank(context.Context, *StateRef) (*SignedTransaction, error)
	AllocateFund(context.Context, *AllocateFundRequest) (*SignedTransaction, error)
}

// UnimplementedIbcServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIbcServiceServer struct {
}

func (*UnimplementedIbcServiceServer) CreateGenesis(ctx context.Context, req *CreateGenesisRequest) (*SignedTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenesis not implemented")
}
func (*UnimplementedIbcServiceServer) CreateHostAndBank(ctx context.Context, req *StateRef) (*SignedTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHostAndBank not implemented")
}
func (*UnimplementedIbcServiceServer) AllocateFund(ctx context.Context, req *AllocateFundRequest) (*SignedTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateFund not implemented")
}

func RegisterIbcServiceServer(s grpc1.Server, srv IbcServiceServer) {
	s.RegisterService(&_IbcService_serviceDesc, srv)
}

func _IbcService_CreateGenesis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGenesisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IbcServiceServer).CreateGenesis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.IbcService/CreateGenesis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IbcServiceServer).CreateGenesis(ctx, req.(*CreateGenesisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IbcService_CreateHostAndBank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IbcServiceServer).CreateHostAndBank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.IbcService/CreateHostAndBank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IbcServiceServer).CreateHostAndBank(ctx, req.(*StateRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _IbcService_AllocateFund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateFundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IbcServiceServer).AllocateFund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.IbcService/AllocateFund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IbcServiceServer).AllocateFund(ctx, req.(*AllocateFundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IbcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ibc.lightclients.corda.v1.IbcService",
	HandlerType: (*IbcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGenesis",
			Handler:    _IbcService_CreateGenesis_Handler,
		},
		{
			MethodName: "CreateHostAndBank",
			Handler:    _IbcService_CreateHostAndBank_Handler,
		},
		{
			MethodName: "AllocateFund",
			Handler:    _IbcService_AllocateFund_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ibc/lightclients/corda/v1/operation.proto",
}

func (m *PartiesFromNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartiesFromNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartiesFromNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExactMatch {
		i--
		if m.ExactMatch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintOperation(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PartiesFromNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartiesFromNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartiesFromNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Parties) > 0 {
		for iNdEx := len(m.Parties) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Parties[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOperation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateGenesisRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGenesisRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateGenesisRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Participants) > 0 {
		for iNdEx := len(m.Participants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Participants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOperation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateHostAndBankRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateHostAndBankRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateHostAndBankRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOperation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AllocateFundRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocateFundRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllocateFundRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintOperation(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintOperation(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintOperation(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOperation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOperation(dAtA []byte, offset int, v uint64) int {
	offset -= sovOperation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PartiesFromNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOperation(uint64(l))
	}
	if m.ExactMatch {
		n += 2
	}
	return n
}

func (m *PartiesFromNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Parties) > 0 {
		for _, e := range m.Parties {
			l = e.Size()
			n += 1 + l + sovOperation(uint64(l))
		}
	}
	return n
}

func (m *CreateGenesisRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Participants) > 0 {
		for _, e := range m.Participants {
			l = e.Size()
			n += 1 + l + sovOperation(uint64(l))
		}
	}
	return n
}

func (m *CreateHostAndBankRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovOperation(uint64(l))
	}
	return n
}

func (m *AllocateFundRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovOperation(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovOperation(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovOperation(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovOperation(uint64(l))
	}
	return n
}

func sovOperation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOperation(x uint64) (n int) {
	return sovOperation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PartiesFromNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartiesFromNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartiesFromNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExactMatch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExactMatch = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOperation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOperation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartiesFromNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartiesFromNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartiesFromNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parties = append(m.Parties, &Party{})
			if err := m.Parties[len(m.Parties)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOperation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateGenesisRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGenesisRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGenesisRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, &Party{})
			if err := m.Participants[len(m.Participants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOperation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateHostAndBankRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateHostAndBankRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateHostAndBankRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOperation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllocateFundRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocateFundRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocateFundRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOperation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOperation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOperation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOperation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOperation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOperation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOperation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOperation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOperation = fmt.Errorf("proto: unexpected end of group")
)
